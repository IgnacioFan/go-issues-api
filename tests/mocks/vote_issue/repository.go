// Code generated by mockery v2.16.0. DO NOT EDIT.

package mocks

import (
	model "go-issues-api/internal/model"

	mock "github.com/stretchr/testify/mock"
)

// VoteIssueRepository is an autogenerated mock type for the VoteIssueRepository type
type VoteIssueRepository struct {
	mock.Mock
}

// Create provides a mock function with given fields: vi
func (_m *VoteIssueRepository) Create(vi *model.VoteIssue) (*model.VoteIssue, error) {
	ret := _m.Called(vi)

	var r0 *model.VoteIssue
	if rf, ok := ret.Get(0).(func(*model.VoteIssue) *model.VoteIssue); ok {
		r0 = rf(vi)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*model.VoteIssue)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(*model.VoteIssue) error); ok {
		r1 = rf(vi)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// Update provides a mock function with given fields: vi
func (_m *VoteIssueRepository) Update(vi *model.VoteIssue) (*model.VoteIssue, error) {
	ret := _m.Called(vi)

	var r0 *model.VoteIssue
	if rf, ok := ret.Get(0).(func(*model.VoteIssue) *model.VoteIssue); ok {
		r0 = rf(vi)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*model.VoteIssue)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(*model.VoteIssue) error); ok {
		r1 = rf(vi)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

type mockConstructorTestingTNewVoteIssueRepository interface {
	mock.TestingT
	Cleanup(func())
}

// NewVoteIssueRepository creates a new instance of VoteIssueRepository. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
func NewVoteIssueRepository(t mockConstructorTestingTNewVoteIssueRepository) *VoteIssueRepository {
	mock := &VoteIssueRepository{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
